name: ci-cd

on:
  push:
    branches: ["main"]
    tags: ["v*"]

permissions:
  contents: read
  id-token: write
  packages: write

concurrency:
  group: ci-${{ github.ref }}
  cancel-in-progress: true

env:
  GAR_LOCATION: us-central1
  GCP_PROJECT_ID: directed-craft-469416-u3
  ARTIFACT_REPO: app-images
  IMAGE_NAME: helloapp
  STAGING_CLUSTER: gkestaging
  PRODUCTION_CLUSTER: gkeproduction
  GKE_LOCATION: us-central1
  K8S_NAMESPACE_STAGING: app-staging
  K8S_NAMESPACE_PROD: app-production
  SECRET_NAME: app-message
  SECRET_KEY: APP_MESSAGE
  PROD_APPROVERS: rsolano8000

jobs:
  build:
    runs-on: ubuntu-latest
    outputs:
      image_tag: ${{ steps.choose_tag.outputs.tag }}
    steps:
      - name: "Checkout"
        uses: actions/checkout@v4

      - name: "Preflight: validate WIF secrets"
        shell: bash
        run: |
          WIP="${{ secrets.GCP_WORKLOAD_IDENTITY_PROVIDER }}"
          SA="${{ secrets.GCP_SERVICE_ACCOUNT_EMAIL }}"
          [[ -n "$WIP" ]] || { echo "Missing secret: GCP_WORKLOAD_IDENTITY_PROVIDER"; exit 1; }
          [[ -n "$SA"  ]] || { echo "Missing secret: GCP_SERVICE_ACCOUNT_EMAIL"; exit 1; }
          case "$WIP" in \"*|*\" ) echo "GCP_WORKLOAD_IDENTITY_PROVIDER must not include quotes"; exit 1;; esac
          case "$SA"  in \"*|*\" ) echo "GCP_SERVICE_ACCOUNT_EMAIL must not include quotes"; exit 1;; esac
          [[ "$WIP" =~ ^projects/[0-9]+/locations/global/workloadIdentityPools/.+/providers/.+$ ]] || { echo "Bad WIF path format: $WIP"; exit 1; }
          [[ "$SA" =~ \.iam\.gserviceaccount\.com$ ]] || { echo "Bad SA email format: $SA"; exit 1; }
          echo "WIF path length: $(printf %s "$WIP" | wc -c)"
          echo "SA email length: $(printf %s "$SA" | wc -c)"

      - name: "Set up gcloud auth via OIDC"
        uses: google-github-actions/auth@v2
        with:
          workload_identity_provider: projects/276959457448/locations/global/workloadIdentityPools/pool-github1/providers/github
          service_account: ${{ secrets.GCP_SERVICE_ACCOUNT_EMAIL }}
          audience: "//iam.googleapis.com/projects/276959457448/locations/global/workloadIdentityPools/pool-github1/providers/github"

      - name: "Install gcloud"
        uses: google-github-actions/setup-gcloud@v2
        with:
          project_id: ${{ env.GCP_PROJECT_ID }}

      - name: "Configure Docker for GAR"
        run: gcloud auth configure-docker $GAR_LOCATION-docker.pkg.dev --quiet

      - name: "Docker metadata"
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.GAR_LOCATION }}-docker.pkg.dev/${{ env.GCP_PROJECT_ID }}/${{ env.ARTIFACT_REPO }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=tag
            type=raw,value=main,enable=${{ github.ref_type == 'branch' }}
            type=sha,format=short

      - name: "Choose image tag for deployment"
        id: choose_tag
        shell: bash
        run: |
          if [[ "${GITHUB_REF_TYPE}" == "tag" ]]; then
            echo "tag=${GITHUB_REF_NAME}" >> "$GITHUB_OUTPUT"
          else
            echo "tag=${GITHUB_SHA::7}" >> "$GITHUB_OUTPUT"
          fi

      - name: "Build and push"
        uses: docker/build-push-action@v6
        with:
          context: .
          file: ./Dockerfile
          push: true
          tags: ${{ steps.meta.outputs.tags }}

      - name: "Install Helm"
        uses: azure/setup-helm@v4

      - name: "Helm lint"
        run: helm lint ./helm/app

  deploy_staging:
    runs-on: ubuntu-latest
    needs: build
    if: github.ref_type == 'branch'
    steps:
      - name: "Checkout"
        uses: actions/checkout@v4

      - name: "Auth to GCP"
        uses: google-github-actions/auth@v2
        with:
          workload_identity_provider: projects/276959457448/locations/global/workloadIdentityPools/pool-github1/providers/github
          service_account: ${{ secrets.GCP_SERVICE_ACCOUNT_EMAIL }}
          audience: "//iam.googleapis.com/projects/276959457448/locations/global/workloadIdentityPools/pool-github1/providers/github"

      - name: "Install gcloud"
        uses: google-github-actions/setup-gcloud@v2
        with:
          project_id: ${{ env.GCP_PROJECT_ID }}

      - name: "Get GKE credentials (staging)"
        uses: google-github-actions/get-gke-credentials@v2
        with:
          cluster_name: ${{ env.STAGING_CLUSTER }}
          location: ${{ env.GKE_LOCATION }}

      - name: "Ensure namespace exists"
        run: kubectl create namespace "$K8S_NAMESPACE_STAGING" --dry-run=client -o yaml | kubectl apply -f -

      - name: "Fetch secret from Secret Manager and apply to K8s"
        shell: bash
        run: |
          APP_MESSAGE=$(gcloud secrets versions access latest --secret="${SECRET_NAME}-staging")
          kubectl -n "$K8S_NAMESPACE_STAGING" create secret generic "$SECRET_NAME" \
            --from-literal=${SECRET_KEY}="$APP_MESSAGE" \
            --dry-run=client -o
  approve:
    # Manual approval gate using GitHub Environments (configure allowed reviewers in repo settings)
    runs-on: ubuntu-latest
    needs: build
    if: startsWith(github.ref, 'refs/tags/v')
    environment:
      name: production
    steps:
      - name: Validate SemVer tag
        run: |
          TAG="${GITHUB_REF_NAME}"
          if [[ ! "$TAG" =~ ^v[0-9]+\.[0-9]+\.[0-9]+(-[0-9A-Za-z\.-]+)?$ ]]; then
            echo "Tag $TAG is not valid SemVer (vMAJOR.MINOR.PATCH)."
            exit 1
          fi
          echo "SemVer tag OK: $TAG"
      - name: Restrict to allowed users
        run: |
          ALLOWED="${{ vars.PROD_APPROVERS || '' }}"
          if [[ -z "$ALLOWED" ]]; then
            echo "No PROD_APPROVERS set in repo/org variables (comma-separated GitHub usernames)."
            exit 1
          fi
          IFS=',' read -ra USERS <<< "$ALLOWED"
          OK="no"
          for u in "${USERS[@]}"; do
            if [[ "${u// /}" == "${GITHUB_ACTOR}" ]]; then
              OK="yes"; break
            fi
          done
          if [[ "$OK" != "yes" ]]; then
            echo "User $GITHUB_ACTOR is not authorized to approve production deploy."
            exit 1
          fi
          echo "Approver authorized: $GITHUB_ACTOR"
  deploy_production:
    runs-on: ubuntu-latest
    needs: approve
    if: startsWith(github.ref, 'refs/tags/v')
    steps:
      - uses: actions/checkout@v4

      - name: Auth to GCP
        uses: google-github-actions/auth@v2
        with:
          workload_identity_provider: projects/276959457448/locations/global/workloadIdentityPools/pool-github1/providers/github
          service_account: ${{ secrets.GCP_SERVICE_ACCOUNT_EMAIL }}

      - name: Get GKE credentials (production)
        uses: google-github-actions/get-gke-credentials@v2
        with:
          cluster_name: ${{ env.PRODUCTION_CLUSTER }}
          location: ${{ env.GKE_LOCATION }}

      - name: Ensure namespace exists
        run: |
          kubectl create namespace $K8S_NAMESPACE_PROD --dry-run=client -o yaml | kubectl apply -f -
      - name: Fetch secret from GCP Secret Manager and apply to K8s
        shell: bash
        run: |
          APP_MESSAGE=$(gcloud secrets versions access latest --secret="${SECRET_NAME}-production")
          kubectl -n $K8S_NAMESPACE_PROD create secret generic $SECRET_NAME             --from-literal=${SECRET_KEY}="$APP_MESSAGE"             --dry-run=client -o yaml | kubectl apply -f -
      - name: Install Helm
        uses: azure/setup-helm@v4

      - name: Helm upgrade (production)
        run: |
          helm upgrade --install app ./helm/app             -n $K8S_NAMESPACE_PROD             -f ./helm/app/values-production.yaml             --set image.repository="${GAR_LOCATION}-docker.pkg.dev/${GCP_PROJECT_ID}/${ARTIFACT_REPO}/${IMAGE_NAME}"             --set image.tag="${GITHUB_REF_NAME}"